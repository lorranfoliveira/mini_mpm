
@article{bardenhagen_energy_2002,
	title = {Energy {Conservation} {Error} in the {Material} {Point} {Method} for {Solid} {Mechanics}},
	volume = {180},
	issn = {00219991},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0021999102971032},
	doi = {10.1006/jcph.2002.7103},
	language = {en},
	number = {1},
	urldate = {2022-09-20},
	journal = {Journal of Computational Physics},
	author = {Bardenhagen, S.G.},
	month = jul,
	year = {2002},
	pages = {383--403},
	file = {Bardenhagen - 2002 - Energy Conservation Error in the Material Point Me.pdf:C\:\\Users\\lorra\\OneDrive\\Estudos\\Pesquisas científicas\\Zotero\\storage\\RVDUQ896\\Bardenhagen - 2002 - Energy Conservation Error in the Material Point Me.pdf:application/pdf},
}

@article{SINAIE2017,
title = {Programming the material point method in Julia},
journal = {Advances in Engineering Software},
volume = {105},
pages = {17-29},
year = {2017},
issn = {0965-9978},
doi = {https://doi.org/10.1016/j.advengsoft.2017.01.008},
url = {https://www.sciencedirect.com/science/article/pii/S0965997816302769},
author = {Sina Sinaie and Vinh Phu Nguyen and Chi Thanh Nguyen and Stephane Bordas},
keywords = {Julia, Material point method (MPM), High-performance dynamic programming language, Technical computing},
abstract = {This article presents the implementation of the material point method (MPM) using Julia. Julia is an open source, multi-platform, high-level, high-performance dynamic programming language for technical computing, with syntax that is familiar to Matlab and Python programmers. MPM is a hybrid particle-grid approach that combines the advantages of Eulerian and Lagrangian methods and is suitable for complex solid mechanics problems involving contact, impact and large deformations. We will show that a Julia based MPM code, which is short, compact and readable and uses only Julia built in features, performs much better (with speed up of up to 8) than a similar Matlab based MPM code for large strain solid mechanics simulations. We share our experiences of implementing MPM in Julia and demonstrate that Julia is a very interesting platform for rapid development in the field of scientific computing.}
}


@book{zhang_material_2017,
	address = {Amsterdam ; Boston},
	series = {Elsevier and {Tsinghua} {University} {Press} computational mechanics series},
	title = {The material point method},
	isbn = {978-0-12-407716-4},
	language = {en},
	publisher = {Elsevier/AP},
	author = {Zhang, Xiong},
	year = {2017},
	keywords = {Material point method},
	file = {Zhang - 2017 - The material point method.pdf:C\:\\Users\\lorra\\OneDrive\\Estudos\\Pesquisas científicas\\Zotero\\storage\\3X6MLZKJ\\Zhang - 2017 - The material point method.pdf:application/pdf},
}


@book{bathe_finite_2014,
	address = {Englewood Cliffs, N.J},
	edition = {2},
	title = {Finite element procedures},
	isbn = {978-0-9790049-5-7},
	language = {en},
	publisher = {Prentice-Hall},
	author = {Bathe, Klaus-Jürgen},
	year = {2014},
	note = {OCLC: ocn930843107},
	file = {Bathe - 2014 - Finite element procedures.pdf:C\:\\Users\\lorra\\OneDrive\\Estudos\\Pesquisas científicas\\Zotero\\storage\\IHPCSZYL\\Bathe - 2014 - Finite element procedures.pdf:application/pdf;FEP_solutions.pdf:C\:\\Users\\lorra\\OneDrive\\Estudos\\Pesquisas científicas\\Zotero\\storage\\EUCAMFJS\\FEP_solutions.pdf:application/pdf},
}
